generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String
  role               useRole
  status             accountStatus       @default(ACTIVE)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Admin              Admin?
  Donor              Donor?
  Requester          Requester?
  ContactInformation ContactInformation?

  @@map("users")
}

model Admin {
  id        String        @id @default(uuid())
  userId    String        @unique
  user      User          @relation(fields: [userId], references: [id])
  name      String
  email     String        @unique
  status    accountStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("admin")
}

model Donor {
  id           String        @id @default(uuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id])
  name         String
  email        String        @unique
  status       accountStatus @default(ACTIVE)
  bloodType    BloodType
  location     String
  availability Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Request      Request[]

  @@map("donor")
}

model Requester {
  id            String        @id @default(uuid())
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id])
  name          String
  email         String        @unique
  contactNumber String        @unique
  status        accountStatus @default(ACTIVE)
  bloodType     BloodType
  location      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Request       Request[]

  @@map("requester")
}

model Request {
  id              String        @id @default(uuid())
  donorId         String
  requesterId     String
  phoneNumber     String
  dateOfDonation  String
  hospitalName    String
  hospitalAddress String
  reason          String?
  requestStatus   requestStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  donor           Donor         @relation(fields: [donorId], references: [userId])
  requester       Requester     @relation(fields: [requesterId], references: [userId])
  SuccessStory    SuccessStory?

  @@map("requests")
}

model SuccessStory {
  id        String   @id @default(uuid())
  requestId String   @unique
  request   Request  @relation(fields: [requestId], references: [id])
  title     String
  content   String
  createdAt DateTime @default(now())
}

model TeamMember {
  id        String   @id @default(uuid())
  name      String
  role      String
  bio       String?
  photoUrl  String?
  createdAt DateTime @default(now())
}

model DonationTip {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
}

model ContactInformation {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  email       String
  phone       String
  socialMedia String?
  createdAt   DateTime @default(now())
}

model CoverageArea {
  id          String   @id @default(uuid())
  regionName  String
  description String?
  createdAt   DateTime @default(now())
}

enum requestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum accountStatus {
  ACTIVE
  BLOCKED
}

enum useRole {
  Admin
  Donor
  Requester
}

enum BloodType {
  A_Positive
  A_Negative
  B_Positive
  B_Negative
  AB_Positive
  AB_Negative
  O_Positive
  O_Negative
}
